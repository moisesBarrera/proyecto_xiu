-- MySQL Script generated by MySQL Workbench
-- Sun Apr  2 18:05:34 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema SGG
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema SGG
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SGG` DEFAULT CHARACTER SET utf8 ;
USE `SGG` ;

-- -----------------------------------------------------
-- Table `SGG`.`usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`usuarios` (
  `idusuarios` INT NOT NULL AUTO_INCREMENT,
  `usuario` VARCHAR(255) NULL,
  `contrasena` VARCHAR(255) NULL,
  PRIMARY KEY (`idusuarios`),
  UNIQUE INDEX `usuario_UNIQUE` (`usuario` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`Escuela`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`Escuela` (
  `idEscuela` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NULL,
  `turno` INT NULL,
  `cct` VARCHAR(255) NULL,
  `sector` VARCHAR(45) NULL,
  `zonaEscolar` VARCHAR(45) NULL,
  `ubicacion` VARCHAR(45) NULL,
  `usuarios_idusuarios` INT NOT NULL,
  PRIMARY KEY (`idEscuela`),
  INDEX `fk_Escuela_usuarios1_idx` (`usuarios_idusuarios` ASC),
  CONSTRAINT `fk_Escuela_usuarios1`
    FOREIGN KEY (`usuarios_idusuarios`)
    REFERENCES `SGG`.`usuarios` (`idusuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`grupo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`grupo` (
  `idgrupo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NULL,
  `usuarios_idusuarios` INT NOT NULL,
  PRIMARY KEY (`idgrupo`),
  INDEX `fk_grupo_usuarios1_idx` (`usuarios_idusuarios` ASC),
  CONSTRAINT `fk_grupo_usuarios1`
    FOREIGN KEY (`usuarios_idusuarios`)
    REFERENCES `SGG`.`usuarios` (`idusuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`Alumnos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`Alumnos` (
  `idAlumnos` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NULL,
  `apellido` VARCHAR(255) NULL,
  `genero` VARCHAR(45) NULL,
  `curp` VARCHAR(45) NULL,
  `matricula` VARCHAR(45) NULL,
  `usuario_idusuario` INT NOT NULL,
  `observaciones` VARCHAR(255) NULL,
  `grupo_idgrupo` INT NOT NULL,
  PRIMARY KEY (`idAlumnos`),
  INDEX `fk_Alumnos_usuario1_idx` (`usuario_idusuario` ASC),
  INDEX `fk_Alumnos_grupo1_idx` (`grupo_idgrupo` ASC),
  CONSTRAINT `fk_Alumnos_usuario1`
    FOREIGN KEY (`usuario_idusuario`)
    REFERENCES `SGG`.`usuarios` (`idusuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Alumnos_grupo1`
    FOREIGN KEY (`grupo_idgrupo`)
    REFERENCES `SGG`.`grupo` (`idgrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`maestros`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`maestros` (
  `idmaestros` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NULL,
  `apellido` VARCHAR(255) NULL,
  `rfc` VARCHAR(45) NULL,
  `cedulaProfesional` VARCHAR(45) NULL,
  `gradoMaxEstudios` VARCHAR(255) NULL,
  `curp` VARCHAR(45) NULL,
  `domicilioParticular` VARCHAR(255) NULL,
  `telefono` VARCHAR(255) NULL,
  `usuario_idusuario` INT NOT NULL,
  PRIMARY KEY (`idmaestros`),
  INDEX `fk_maestros_usuario1_idx` (`usuario_idusuario` ASC),
  CONSTRAINT `fk_maestros_usuario1`
    FOREIGN KEY (`usuario_idusuario`)
    REFERENCES `SGG`.`usuarios` (`idusuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`PadresFamilia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`PadresFamilia` (
  `idPadresFamilia` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NULL,
  `apellidos` VARCHAR(255) NULL,
  `telefono` VARCHAR(45) NOT NULL,
  `direccion` VARCHAR(45) NULL,
  `email` VARCHAR(255) NOT NULL,
  `usuarios_idusuarios` INT NOT NULL,
  PRIMARY KEY (`idPadresFamilia`),
  INDEX `fk_PadresFamilia_usuarios1_idx` (`usuarios_idusuarios` ASC),
  CONSTRAINT `fk_PadresFamilia_usuarios1`
    FOREIGN KEY (`usuarios_idusuarios`)
    REFERENCES `SGG`.`usuarios` (`idusuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`Alumnos_has_PadresFamilia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`Alumnos_has_PadresFamilia` (
  `Alumnos_idAlumnos` INT NOT NULL,
  `PadresFamilia_idPadresFamilia` INT NOT NULL,
  INDEX `fk_Alumnos_has_PadresFamilia_PadresFamilia1_idx` (`PadresFamilia_idPadresFamilia` ASC),
  INDEX `fk_Alumnos_has_PadresFamilia_Alumnos_idx` (`Alumnos_idAlumnos` ASC),
  CONSTRAINT `fk_Alumnos_has_PadresFamilia_Alumnos`
    FOREIGN KEY (`Alumnos_idAlumnos`)
    REFERENCES `SGG`.`Alumnos` (`idAlumnos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Alumnos_has_PadresFamilia_PadresFamilia1`
    FOREIGN KEY (`PadresFamilia_idPadresFamilia`)
    REFERENCES `SGG`.`PadresFamilia` (`idPadresFamilia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`tarea`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`tarea` (
  `idtarea` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NULL,
  `grupo_idgrupo` INT NOT NULL,
  `esEnEquipo` TINYINT NULL,
  PRIMARY KEY (`idtarea`),
  INDEX `fk_tarea_grupo1_idx` (`grupo_idgrupo` ASC),
  CONSTRAINT `fk_tarea_grupo1`
    FOREIGN KEY (`grupo_idgrupo`)
    REFERENCES `SGG`.`grupo` (`idgrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`gruposDeTrabajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`gruposDeTrabajo` (
  `idgruposDeTrabajo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(255) NULL,
  `tarea_idtarea` INT NOT NULL,
  PRIMARY KEY (`idgruposDeTrabajo`),
  INDEX `fk_gruposDeTrabajo_tarea1_idx` (`tarea_idtarea` ASC),
  CONSTRAINT `fk_gruposDeTrabajo_tarea1`
    FOREIGN KEY (`tarea_idtarea`)
    REFERENCES `SGG`.`tarea` (`idtarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`ordenAsientos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`ordenAsientos` (
  `idordenAsientos` INT NOT NULL AUTO_INCREMENT,
  `asiento` INT NULL,
  `Alumnos_idAlumnos` INT NOT NULL,
  `grupo_idgrupo` INT NOT NULL,
  PRIMARY KEY (`idordenAsientos`),
  INDEX `fk_ordenAsientos_Alumnos1_idx` (`Alumnos_idAlumnos` ASC),
  INDEX `fk_ordenAsientos_grupo1_idx` (`grupo_idgrupo` ASC),
  CONSTRAINT `fk_ordenAsientos_Alumnos1`
    FOREIGN KEY (`Alumnos_idAlumnos`)
    REFERENCES `SGG`.`Alumnos` (`idAlumnos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ordenAsientos_grupo1`
    FOREIGN KEY (`grupo_idgrupo`)
    REFERENCES `SGG`.`grupo` (`idgrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`asistencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`asistencia` (
  `Alumnos_idAlumnos` INT NOT NULL,
  `vino` BINARY NULL,
  `fecha` DATETIME NULL,
  `grupo_idgrupo` INT NOT NULL,
  PRIMARY KEY (`Alumnos_idAlumnos`),
  INDEX `fk_Alumnos_has_listas_Alumnos1_idx` (`Alumnos_idAlumnos` ASC),
  INDEX `fk_asistencia_grupo1_idx` (`grupo_idgrupo` ASC),
  CONSTRAINT `fk_Alumnos_has_listas_Alumnos1`
    FOREIGN KEY (`Alumnos_idAlumnos`)
    REFERENCES `SGG`.`Alumnos` (`idAlumnos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_asistencia_grupo1`
    FOREIGN KEY (`grupo_idgrupo`)
    REFERENCES `SGG`.`grupo` (`idgrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGG`.`tarea_has_Alumnos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SGG`.`tarea_has_Alumnos` (
  `tarea_idtarea` INT NOT NULL,
  `Alumnos_idAlumnos` INT NOT NULL,
  `calificacion` INT NULL,
  `gruposDeTrabajo_idgruposDeTrabajo` INT NOT NULL,
  INDEX `fk_tarea_has_Alumnos_Alumnos1_idx` (`Alumnos_idAlumnos` ASC),
  INDEX `fk_tarea_has_Alumnos_tarea1_idx` (`tarea_idtarea` ASC),
  INDEX `fk_tarea_has_Alumnos_gruposDeTrabajo1_idx` (`gruposDeTrabajo_idgruposDeTrabajo` ASC),
  CONSTRAINT `fk_tarea_has_Alumnos_tarea1`
    FOREIGN KEY (`tarea_idtarea`)
    REFERENCES `SGG`.`tarea` (`idtarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tarea_has_Alumnos_Alumnos1`
    FOREIGN KEY (`Alumnos_idAlumnos`)
    REFERENCES `SGG`.`Alumnos` (`idAlumnos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tarea_has_Alumnos_gruposDeTrabajo1`
    FOREIGN KEY (`gruposDeTrabajo_idgruposDeTrabajo`)
    REFERENCES `SGG`.`gruposDeTrabajo` (`idgruposDeTrabajo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `SGG` ;

-- -----------------------------------------------------
-- procedure REGISTRAR
-- -----------------------------------------------------

DELIMITER $$
USE `SGG`$$
CREATE PROCEDURE `REGISTRAR` (IN user VARCHAR(255), IN password VARCHAR(255))
BEGIN
	DECLARE `ID` INT DEFAULT 0;
	INSERT INTO usuarios (usuario,contrasena) VALUES (user, password);
    SET `ID` = (SELECT MAX(idusuarios) FROM usuarios);
    INSERT INTO maestros (maestros.usuario_idusuario) VALUES (`ID`);
    INSERT INTO escuela (escuela.usuarios_idusuarios) VALUES (`ID`);
    SELECT MAX(idusuarios) as `id` FROM usuarios;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_Student
-- -----------------------------------------------------

DELIMITER $$
USE `SGG`$$
CREATE PROCEDURE `new_Student` (IN Nombre VARCHAR(255), IN Apellido VARCHAR(255), IN Genero VARCHAR(45), IN Curp VARCHAR(45), IN Matricula VARCHAR(45), IN Usuario_idusuario INT(11), IN Observaciones VARCHAR(255),IN Grupo_idgrupo INT(11))
BEGIN
	DECLARE `ID` INT DEFAULT 0;
    DECLARE `maxAlumno` INT DEFAULT 0;
    INSERT INTO Alumnos (nombre, apellido, genero, curp, matricula, usuario_idusuario, observaciones, grupo_idgrupo) VALUES (Nombre, Apellido, Genero, Curp, Matricula, Usuario_idusuario, Observaciones, Grupo_idgrupo);
    SET `ID` = (SELECT MAX(idAlumnos) FROM Alumnos);
    SET `maxAlumno` = (SELECT COUNT(*) FROM Alumnos WHERE grupo_idgrupo= Grupo_idgrupo);
    INSERT INTO ordenAsientos (asiento, Alumnos_idAlumnos,grupo_idgrupo) VALUES (`maxAlumno`,`ID`,Grupo_idgrupo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure nueva_tarea
-- -----------------------------------------------------

DELIMITER $$
USE `SGG`$$
CREATE PROCEDURE `nueva_tarea` (IN Nombre VARCHAR(255),IN Grupo_idgrupo INT(11), IN isTeam boolean)
BEGIN
	INSERT INTO tarea (nombre, grupo_idgrupo, esEnEquipo) VALUES (Nombre, Grupo_idgrupo,isTeam); 
    select max(idtarea) as `id` from tarea;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
